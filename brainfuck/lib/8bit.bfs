################################################################################

read8(x)
{
	!
	? x ,
	?~
}

write8(x)
{
	!
	? x .
	?~
}

decr8(x)
{
	!
	? x -
	?~
}

#x = 0
0(x){! x [-] ?~}

zero8(x){0(x)}

#y = x; x = 0
move8(x;y)
{
	0(y)  #y = 0
	move8F(x;y)
}
#same, but requires zero-value target
move8F(x;y)
{
	!
	? x [       #while x
	? x     -   #    x--
	? y     +   #    y++
	? x ]
	? ~
}


#y = x
copy8(x;y;temp0)
{
	0(temp0)
	copy8F(x;y;temp0)
}
#same, but requires zero-value temp0
copy8F(x;y;temp0)
{
	!
	? y     0()   #y = 0
	? x     [     #while x
	? x     -     #    x--
	? y     +     #    y++
	? temp0 +     #    temp0++
	? x     ]
	? temp0 [     #while temp0
	? temp0 -     #    temp0--
	? x     +     #    x++
	? temp0 ]
	? ~
}




+0(){}
+1(){+}
+2(){++}
+3(){+++}
+4(){++++}
+5(){+++++}
+6(){++++++}
+7(){+++++++}
+8(){++++++++}
+9(){+++++++++}
+a(){++++++++++}
+b(){+++++++++++}
+c(){++++++++++++}
+d(){+++++++++++++}
+e(){++++++++++++++}
+f(){+++++++++++++++}
*10(x;temp0)
{
	!
	?       move8(x;temp0)   #temp0 = x; x = 0
	? temp0 [                #while temp0 != 0
	? temp0 -                #    temp0--
	? x     ++++++++++++++++ #    x += 0x10
	? temp0 ]
	? ~
}

const8(x;a;b;temp0)
{
	!
	? x 0() a
	?   *10(x;temp0)
	? x b
	?~
}

#y -= x
st8(y;x;temp0)
{
	!
	? temp0 0()   #temp0 = 0
	? x     [     #while x
	? x     -     #    x--
	? y     -     #    y--
	? temp0 +     #    temp0++
	? x     ]
	? temp0 [     #while temp0
	? temp0 -     #    temp0--
	? x     +     #    x++
	? temp0 ]
	? ~
}

#z = y - x
subtract8(z;y;x;temp0)
{
	copy8(y;z;temp0)
	st8(z;x;temp0)
}

#y += x
ad8(y;x;temp0)
{
	!
	? temp0 0()   #temp0 = 0
	? x     [     #while x
	? x     -     #    x--
	? y     +     #    y++
	? temp0 +     #    temp0++
	? x     ]
	? temp0 [     #while temp0
	? temp0 -     #    temp0--
	? x     +     #    x++
	? temp0 ]
	? ~
}

#z = y + x
add8(z;y;x;temp0)
{
	copy8(y;z;temp0)
	ad8(z;x;temp0)
}

#z = x ^ y
#z may be x or y
xor8(z;x;y;temp0;temp1;temp2;temp3;temp4;temp5;temp6;temp7)
{
	copy8(x;temp0;temp2)#temp0 = x
	copy8(y;temp1;temp2)#temp1 = y
	zero8(z)            #z = 0

	!
	? zero8(temp7)     #temp7 = 0
	? temp7 +8()       #temp7 = 8  |repeat 8 times:
	? while(temp7;     #while temp7|
	?     decr8(temp7) #    temp7--|

	?     write8(temp7)

	?     shr8(temp0;temp2;temp4;temp5;temp6) #temp0 /= 2; temp2 = carry
	?     shr8(temp1;temp3;temp4;temp5;temp6) #temp1 /= 2; temp3 = carry

	?     write8(temp2)
	?     write8(temp3)

	?     zero8(temp4) #    temp4 = 0        |one bit xor
	?     temp3 [      #    if temp3         |
	?     temp3 -      #        temp3 = 0    |
	?     temp4 +      #        temp4 = 1    |
	?     temp2 [      #        if temp2     |
	?     temp2 -      #            temp2 = 0|
	?     temp4 -      #            temp4 = 0|
	?     temp2 ]      #                     |
	?     temp3 ]      #                     |
	?     temp2 [      #    if temp2         |
	?     temp2 -      #        temp2 = 0    |
	?     temp4 +      #        temp4 = 1    |
	?     temp2 ]      #                     |

	?     write8(temp4)

	?     shr8(z;temp2;temp3;temp5;temp6) #z /= 2

	?     *10(temp4;temp5) #    temp4 *= 0x10|if temp4:
	?     temp4 [          #    while temp4  |    z += 0x80
	?     temp4 -          #        temp4--  |
	?     z     +8()       #        z += 8   |
	?     temp4 ]          #                 |
	?     )

	?~
}

#x >>= 1; c=carry
shr8(x;c;temp0;temp1;temp2)
{
	copy8(x;temp0;temp1)              #temp0 = x; temp1 = 0
	zero8(c)                          #c = 0
	zero8(temp2)                      #temp2 = 0

	!
	? temp0 [                         #while temp0:

	? c     zero8() +                 #    c = 1        |c = temp0==1
	?       copy8F(temp0;temp1;temp2) #    temp1 = temp0|
	? temp1 -                         #    temp1--      |
	? temp1 [                         #    if temp1:    |
	?       zero8(c)                  #        c = 0    |
	?       zero8(temp1)              #                 |
	? temp1 ]                         #                 |

	? x     -                         #    x--
	? temp0 --                        #    temp0 -= 2

	?       copy8F(c;temp1;temp2)     #    temp1 = c    |if c:
	? temp1 [                         #    if temp1:    |    temp0 = 0
	?       zero8(temp0)              #        temp0 = 0|
	? temp1 -                         #                 |
	? temp1 ]                         #                 |

	? temp0 ]
	?~
}

