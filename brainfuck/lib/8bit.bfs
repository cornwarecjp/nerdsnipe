################################################################################

read8(x)
{
	!
	? x ,
	?~
}

write8(x)
{
	!
	? x .
	?~
}

decr8(x)
{
	!
	? x -
	?~
}

#x = 0
0(x){! x [-] ?~}

zero8(x){0(x)}

#y = x; x = 0
move8(x;y)
{
	0(y)  #y = 0
	move8F(x;y)
}
#same, but requires zero-value target
move8F(x;y)
{
	!
	? x [       #while x
	? x     -   #    x--
	? y     +   #    y++
	? x ]
	? ~
}


#y = x
#stack: 1 byte
copy8(x;y;stack)
{
	0(stack)
	copy8F(x;y;stack)
}
#same, but requires zero-value stack
copy8F(x;y;stack)
{
	!
	? y     0()   #y = 0
	? x     [     #while x
	? x     -     #    x--
	? y     +     #    y++
	? stack +     #    stack++
	? x     ]
	? stack [     #while stack
	? stack -     #    stack--
	? x     +     #    x++
	? stack ]
	? ~
}




+0(){}
+1(){+}
+2(){++}
+3(){+++}
+4(){++++}
+5(){+++++}
+6(){++++++}
+7(){+++++++}
+8(){++++++++}
+9(){+++++++++}
+a(){++++++++++}
+b(){+++++++++++}
+c(){++++++++++++}
+d(){+++++++++++++}
+e(){++++++++++++++}
+f(){+++++++++++++++}
#stack: 1 byte
*10(x;stack)
{
	!
	?       move8(x;stack)   #stack = x; x = 0
	? stack [                #while stack != 0
	? stack -                #    stack--
	? x     ++++++++++++++++ #    x += 0x10
	? stack ]
	? ~
}

#stack: 1 byte
const8(x;a;b;stack)
{
	!
	? x 0() a
	?   *10(x;stack)
	? x b
	?~
}

#y -= x
#stack: 1 byte
st8(y;x;stack)
{
	!
	? stack 0()   #stack = 0
	? x     [     #while x
	? x     -     #    x--
	? y     -     #    y--
	? stack +     #    stack++
	? x     ]
	? stack [     #while stack
	? stack -     #    stack--
	? x     +     #    x++
	? stack ]
	? ~
}

#z = y - x
#stack: 1 byte
subtract8(z;y;x;stack)
{
	copy8(y;z;stack)
	st8(z;x;stack)
}

#y += x
#stack: 1 byte
ad8(y;x;stack)
{
	!
	? stack 0()   #stack = 0
	? x     [     #while x
	? x     -     #    x--
	? y     +     #    y++
	? stack +     #    stack++
	? x     ]
	? ~
	move8F(stack;x)
}

#y += x; c = carry
#stack: 3 bytes
adc8(y;x;c;stack)
{
	t0(){stack}
	t1(){stack >}
	t2(){stack >>}

	0(c)    #c = 0
	0(t0()) #t0 = 0
	0(t1()) #t1 = 0
	0(t2()) #t2 = 0

	!
	? x    [                   #while x
	? x    -                   #    x--
	? t0() +                   #    t0++
	? y    +                   #    y++
	?      copy8F(y;t1();t2()) #    t1 = y    |t2 = (y == 0)
	? t2() +                   #    t2 = 1    |
	? t1() [                   #    if t1     |
	? t2() -                   #        t2 = 0|
	? t1() 0()                 #              |
	? t1() ]                   #              |
	? t2() [                   #    if t2
	? c    +                   #        c = 1
	? t2() -                   #
	? t2() ]                   #
	? x    ]                   #
	?~

	move8F(t0();x)
}

#z = y + x
#stack: 1 byte
add8(z;y;x;stack)
{
	copy8(y;z;stack)
	ad8(z;x;stack)
}

#z = x OP y
#z may be x or y
#OP takes xbit,ybit as input and stores output in zbit
#OP must set xbit,ybit to 0
#stack: 6 bytes
bitwise8(z;x;y;OP;xbit;ybit;zbit;stack)
{
	xCopy(){stack}
	yCopy(){stack >}
	count(){stack >>}
	newStack(){stack >>>}

	copy8(x;xCopy();newStack())#xCopy = x
	copy8(y;yCopy();newStack())#yCopy = y
	zero8(z)              #z = 0

	!
	? zero8(count())     #count = 0
	? count() +8()       #count = 8  |repeat 8 times:
	? while(count();     #while count|
	?     decr8(count()) #    count--|

	?     shr8(z;xbit;newStack())       #z /= 2
	?     shr8(xCopy();xbit;newStack()) #xCopy /= 2; xbit = carry
	?     shr8(yCopy();ybit;newStack()) #yCopy /= 2; ybit = carry

	?     OP

	?     *10(zbit;newStack()) #    zbit *= 0x10|if zbit:
	?     zbit [               #    while zbit  |    z += 0x80
	?     zbit -               #        zbit--  |
	?     z    +8()            #        z += 8  |
	?     zbit ]               #                |
	?     )

	?~
}

#z = x ^ y
#z may be x or y
#stack: 9 bytes
xor8(z;x;y;stack)
{
	xbit(){stack}
	ybit(){stack >}
	zbit(){stack >>}
	newStack(){stack >>>}

	OP()
	{
		#One bit xor
		!
		? zero8(zbit()) #    zbit = 0
		? ybit() [      #    if ybit
		? ybit() -      #        ybit = 0
		? zbit() +      #        zbit = 1
		? xbit() [      #        if xbit
		? xbit() -      #            xbit = 0
		? zbit() -      #            zbit = 0
		? xbit() ]      #
		? ybit() ]      #
		? xbit() [      #    if xbit
		? xbit() -      #        xbit = 0
		? zbit() +      #        zbit = 1
		? xbit() ]      #
		?~
	}

	bitwise8(z;x;y;OP();xbit();ybit();zbit();newStack())
}

#z = x & y
#z may be x or y
#stack: 9 bytes
and8(z;x;y;stack)
{
	xbit(){stack}
	ybit(){stack >}
	zbit(){stack >>}
	newStack(){stack >>>}

	OP()
	{
		#One bit and
		!
		? zbit() 0()    #    zbit = 0
		? ybit() [      #    if ybit
		? ybit() -      #        ybit = 0
		? xbit() [      #        if xbit
		? xbit() -      #            xbit = 0
		? zbit() +      #            zbit = 1
		? xbit() ]      #
		? ybit() ]      #
		?~
	}

	bitwise8(z;x;y;OP();xbit();ybit();zbit();newStack())
}

#y = not x
#stack: 1 byte
not8(y;x;stack)
{
	copy8(x;stack;y) #stack = x; y = 0

	!
	? stack +
	? stack [
	? stack +
	? y     +
	? stack ]
	?~
}

#x >>= 1; c=carry
#stack: 3 bytes
shr8(x;c;stack)
{
	t0(){stack}
	t1(){stack >}
	newStack(){stack >>}

	copy8(x;t0();t1())                  #t0 = x; t1 = 0
	zero8(c)                            #c = 0
	zero8(newStack())                   #newStack = 0

	!
	? t0() [                            #while t0:

	? c     zero8() +                    #    c = 1     |c = t0==1
	?       copy8F(t0();t1();newStack()) #    t1 = t0   |
	? t1() -                             #    t1--      |
	? t1() [                             #    if t1:    |
	?       zero8(c)                     #        c = 0 |
	?       zero8(t1())                  #              |
	? t1() ]                             #              |

	? x     -                            #    x--
	? t0() --                            #    t0 -= 2

	?       copy8F(c;t1();newStack())    #    t1 = c    |if c:
	? t1() [                             #    if t1:    |    t0 = 0
	?       zero8(t0())                  #        t0 = 0|
	? t1() -                             #              |
	? t1() ]                             #              |

	? t0() ]
	?~
}

