################################################################################

read32(x)
{
	!
	? x ,>,>,>,
	?~
}

write32(x)
{
	!
	? x .>.>.>.
	?~
}

#stack: 1 byte
const32(x;a;b;c;d;e;f;g;h;stack)
{
	!
	? x     0() a
	?       *10(x    ;stack)
	? x     b

	? x >   0() c
	?       *10(x >  ;stack)
	? x >   d

	? x >>  0() e
	?       *10(x >> ;stack)
	? x >>  f

	? x >>> 0() g
	?       *10(x >>>;stack)
	? x >>> h

	? ~
}


zero32(x)
{
	! x
	0() > 0() > 0() > 0()
	? ~
}

#y = x; x = 0
move32(x;y)
{
	move8(x    ;y    )
	move8(x >  ;y >  )
	move8(x >> ;y >> )
	move8(x >>>;y >>>)
}

#y = x
#stack: 1 byte
copy32(x;y;stack)
{
	copy8 (x    ;y    ;stack)
	copy8F(x >  ;y >  ;stack)
	copy8F(x >> ;y >> ;stack)
	copy8F(x >>>;y >>>;stack)
}

#y += x
#stack: 5 bytes
ad32(y;x;stack)
{
	c0(){stack}
	c1(){stack >}
	newStack(){stack >>}

	combineCarry()
	{
		!
		? c1() [     #if c1
		? c0() 0() + #    c0 = 1
		? c1() -     #    c1 = 0
		? c1() ]     #
		?~
	}

	adc8(y >>>;x >>>;c0();newStack();newStack() >;newStack() >>) #c0 = cout

	adc8(y >> ;c0() ;c1();newStack();newStack() >;newStack() >>) #c0 = cin, c1 = cout
	adc8(y >> ;x >> ;c0();newStack();newStack() >;newStack() >>) #c0 = cout
	combineCarry()

	adc8(y >  ;c0() ;c1();newStack();newStack() >;newStack() >>) #c0 = cin, c1 = cout
	adc8(y >  ;x >  ;c0();newStack();newStack() >;newStack() >>) #c0 = cout
	combineCarry()

	adc8(y    ;c0() ;c1();newStack();newStack() >;newStack() >>) #c0 = cin, c1 = cout
	adc8(y    ;x    ;c0();newStack();newStack() >;newStack() >>) #c0 = cout
}

#z = x ^ y
#z may be x or y
#stack: 8 bytes
xor32(z;x;y;stack)
{
	temp0(){stack}
	temp1(){stack >   }
	temp2(){stack >>  }
	temp3(){stack >>> }
	temp4(){stack >>>>}
	temp5(){stack >>>> >}
	temp6(){stack >>>> >>}
	temp7(){stack >>>> >>>}

	xor8(z    ;x    ;y    ;temp0();temp1();temp2();temp3();temp4();temp5();temp6();temp7())
	xor8(z >  ;x >  ;y >  ;temp0();temp1();temp2();temp3();temp4();temp5();temp6();temp7())
	xor8(z >> ;x >> ;y >> ;temp0();temp1();temp2();temp3();temp4();temp5();temp6();temp7())
	xor8(z >>>;x >>>;y >>>;temp0();temp1();temp2();temp3();temp4();temp5();temp6();temp7())
}

#z = x & y
#z may be x or y
#stack: 8 bytes
and32(z;x;y;stack)
{
	temp0(){stack}
	temp1(){stack >   }
	temp2(){stack >>  }
	temp3(){stack >>> }
	temp4(){stack >>>>}
	temp5(){stack >>>> >}
	temp6(){stack >>>> >>}
	temp7(){stack >>>> >>>}

	and8(z    ;x    ;y    ;temp0();temp1();temp2();temp3();temp4();temp5();temp6();temp7())
	and8(z >  ;x >  ;y >  ;temp0();temp1();temp2();temp3();temp4();temp5();temp6();temp7())
	and8(z >> ;x >> ;y >> ;temp0();temp1();temp2();temp3();temp4();temp5();temp6();temp7())
	and8(z >>>;x >>>;y >>>;temp0();temp1();temp2();temp3();temp4();temp5();temp6();temp7())
}

#y = ~x
#stack: 1 byte
not32(y;x;stack)
{
	not8(y    ;x    ;stack)
	not8(y >  ;x >  ;stack)
	not8(y >> ;x >> ;stack)
	not8(y >>>;x >>>;stack)
}

#x >>= 1; c=carry
#c is 8-bit
#stack: 4 bytes
shr32(x;c;stack)
{
	c2(){stack}
	newStack(){stack >}

	addCarry(c;dest)
	{
		*10(c;newStack()) # c is now 000x0000
		!
		? c    [        #|dest += 8*c
		? dest ++++++++ #|c = 0
		? c    -        #|
		? c    ]        #|
		?~
	}

	shr8(x >>>;c   ;newStack();newStack() >;newStack() >>)
	shr8(x >> ;c2();newStack();newStack() >;newStack() >>)
	addCarry(c2();x >>>)
	shr8(x >  ;c2();newStack();newStack() >;newStack() >>)
	addCarry(c2();x >> )
	shr8(x    ;c2();newStack();newStack() >;newStack() >>)
	addCarry(c2();x >  )
}

#x rr= 1; c=carry
#c is 8-bit
#stack: 5 bytes
rr32(x;stack)
{
	c() {stack}
	c2(){stack >}
	newStack(){stack >>}

	addCarry(c;dest)
	{
		*10(c;newStack()) # c is now 000x0000
		!
		? c    [        #|dest += 8*c
		? dest ++++++++ #|c = 0
		? c    -        #|
		? c    ]        #|
		?~
	}

	shr8(x >>>;c2();newStack();newStack() >;newStack() >>)
	shr8(x >> ;c();newStack();newStack() >;newStack() >>)
	addCarry(c();x >>>)
	shr8(x >  ;c();newStack();newStack() >;newStack() >>)
	addCarry(c();x >> )
	shr8(x    ;c();newStack();newStack() >;newStack() >>)
	addCarry(c();x >  )
	addCarry(c2();x)
}


#z = x >> y
#y is 8-bit
#stack: 6 bytes
rightshift32(z;x;y;stack)
{
	c(){stack}
	count(){stack >}
	newStack(){stack >>}

	copy32(x;z;newStack())
	copy8(y;count();newStack())
	while(count();
		shr32(z;c();newStack())
		decr8(count())
		)
}


#z = x rr y
#y is 8-bit
#stack: 6 bytes
rightrotate32(z;x;y;stack)
{
	count(){stack}
	newStack(){stack >}

	copy32(x;z;newStack())
	copy8(y;count();newStack())
	while(count();
		rr32(z;newStack())
		decr8(count())
		)
}

