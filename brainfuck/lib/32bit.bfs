################################################################################

read32(x)
{
	!
	? x ,>,>,>,
	?~
}

write32(x)
{
	!
	? x .>.>.>.
	?~
}

const32(x;a;b;c;d;e;f;g;h;temp0)
{
	!
	? x     0() a
	?       *10(x    ;temp0)
	? x     b

	? x >   0() c
	?       *10(x >  ;temp0)
	? x >   d

	? x >>  0() e
	?       *10(x >> ;temp0)
	? x >>  f

	? x >>> 0() g
	?       *10(x >>>;temp0)
	? x >>> h

	? ~
}


zero32(x)
{
	! x
	0() > 0() > 0() > 0()
	? ~
}

#y = x; x = 0
move32(x;y)
{
	move8(x    ;y    )
	move8(x >  ;y >  )
	move8(x >> ;y >> )
	move8(x >>>;y >>>)
}

#y = x
#temp0 can be 8-bit
copy32(x;y;temp0)
{
	copy8 (x    ;y    ;temp0)
	copy8F(x >  ;y >  ;temp0)
	copy8F(x >> ;y >> ;temp0)
	copy8F(x >>>;y >>>;temp0)
}

#x >>= 1; c=carry
#c is 8-bit
#temp0;temp1;temp2;temp3 can be 8-bit
shr32(x;c;temp0;temp1;temp2;temp3)
{
	addCarry(c;dest)
	{
		*10(c;temp0) # c is now 000x0000
		!
		? c    [        #|dest += 8*c
		? dest ++++++++ #|c = 0
		? c    -        #|
		? c    ]        #|
		?~
	}

	shr8(x >>>;c    ;temp0;temp1;temp2)
	shr8(x >> ;temp3;temp0;temp1;temp2)
	addCarry(temp3;x >>>)
	shr8(x >  ;temp3;temp0;temp1;temp2)
	addCarry(temp3;x >> )
	shr8(x    ;temp3;temp0;temp1;temp2)
	addCarry(temp3;x >  )
}

#x r= 1; c=carry
#c is 8-bit
#temp0;temp1;temp2;temp3;temp4 can be 8-bit
rr32(x;temp0;temp1;temp2;temp3;temp4)
{
	addCarry(c;dest)
	{
		*10(c;temp0) # c is now 000x0000
		!
		? c    [        #|dest += 8*c
		? dest ++++++++ #|c = 0
		? c    -        #|
		? c    ]        #|
		?~
	}

	shr8(x >>>;temp4;temp0;temp1;temp2)
	shr8(x >> ;temp3;temp0;temp1;temp2)
	addCarry(temp3;x >>>)
	shr8(x >  ;temp3;temp0;temp1;temp2)
	addCarry(temp3;x >> )
	shr8(x    ;temp3;temp0;temp1;temp2)
	addCarry(temp3;x >  )
	addCarry(temp4;x    )
}

