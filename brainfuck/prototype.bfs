################################################################################

#32-bit position shifts
>1(){>>>>}
<1(){<<<<}
>2(){>1()>1()}
<2(){<1()<1()}
>4(){>2()>2()}
<4(){<2()<2()}
>8(){>4()>4()}
<8(){<4()<4()}
>16(){>8()>8()}
<16(){<8()<8()}


#Memory map
h0(){}
h1(){h0() >1()}
h2(){h0() >1() >1()}
h3(){h0() >1() >1() >1()}
h4(){h0() >1() >1() >1() >1()}
h5(){h0() >1() >1() >1() >1() >1()}
h6(){h0() >1() >1() >1() >1() >1() >1()}
h7(){h0() >1() >1() >1() >1() >1() >1() >1()}

s0(){h0() >8()}
s1(){s0() >1()}
ch(){s1() >1()}
maj(){ch() >1()}
temp1(){maj() >1()}
temp2(){temp1() >1()}

a(){temp2() >1()}
b(){a() >1()}
c(){b() >1()}
d(){c() >1()}
e(){d() >1()}
f(){e() >1()}
g(){f() >1()}
h(){g() >1()}

stack(){h() >1()}
#Reserved 32 bytes for the stack

A(){stack() >8()}
#Actual data in A starts 7 bytes later

#In A:
#w = 0x00..0x3f
#stack: 1 byte
w0(x;stack){zero8(x)}
#k = 0x40..0x7f
#stack: 1 byte
k0(x;stack){const8(x;+4();+0();stack)}

#Note 1: All variables are 32 bit unsigned integers and addition is calculated modulo 232
#Note 2: For each round, there is one round constant k[i] and one entry in the message schedule array w[i], 0 ≤ i ≤ 63
#Note 3: The compression function uses 8 working variables, a through h
#Note 4: Big-endian convention is used when expressing the constants in this pseudocode,
#    and when parsing message block data from bytes to words, for example,
#    the first word of the input message "abc" after padding is 0x61626380

#Initialize hash values:
#(first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):

#stack: 1 byte
const32(h0(); +6(); +a(); +0(); +9(); +e(); +6(); +6(); +7(); stack())
const32(h1(); +b(); +b(); +6(); +7(); +a(); +e(); +8(); +5(); stack())
const32(h2(); +3(); +c(); +6(); +e(); +f(); +3(); +7(); +2(); stack())
const32(h3(); +a(); +5(); +4(); +f(); +f(); +5(); +3(); +a(); stack())
const32(h4(); +5(); +1(); +0(); +e(); +5(); +2(); +7(); +f(); stack())
const32(h5(); +9(); +b(); +0(); +5(); +6(); +8(); +8(); +c(); stack())
const32(h6(); +1(); +f(); +8(); +3(); +d(); +9(); +a(); +b(); stack())
const32(h7(); +5(); +b(); +e(); +0(); +c(); +d(); +1(); +9(); stack())


append(index;value)
{
	arrayStore32(A();index;value)
	!
	index +
	?~
}
#stack: 1 byte
appendConst(index;a;b;c;d;e;f;g;h;stack)
{
	value(){stack}
	newStack(){value() >1()}
	const32(value(); a;b;c;d;e;f;g;h; newStack())
	append(index;value())
}

#Initialize array of round constants:
#(first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311):
#stack: 3 bytes
initRoundConstants(stack)
{
	index()   {stack    }
	newStack(){index() >}
	ac(a;b;c;d;e;f;g;h){appendConst(index();a;b;c;d;e;f;g;h;newStack())}

	k0(index();newStack())

	ac(+4(); +2(); +8(); +a(); +2(); +f(); +9(); +8())
	ac(+7(); +1(); +3(); +7(); +4(); +4(); +9(); +1())
	ac(+b(); +5(); +c(); +0(); +f(); +b(); +c(); +f())
	ac(+e(); +9(); +b(); +5(); +d(); +b(); +a(); +5())
	ac(+3(); +9(); +5(); +6(); +c(); +2(); +5(); +b())
	ac(+5(); +9(); +f(); +1(); +1(); +1(); +f(); +1())
	ac(+9(); +2(); +3(); +f(); +8(); +2(); +a(); +4())
	ac(+a(); +b(); +1(); +c(); +5(); +e(); +d(); +5())
	ac(+d(); +8(); +0(); +7(); +a(); +a(); +9(); +8())
	ac(+1(); +2(); +8(); +3(); +5(); +b(); +0(); +1())
	ac(+2(); +4(); +3(); +1(); +8(); +5(); +b(); +e())
	ac(+5(); +5(); +0(); +c(); +7(); +d(); +c(); +3())
	ac(+7(); +2(); +b(); +e(); +5(); +d(); +7(); +4())
	ac(+8(); +0(); +d(); +e(); +b(); +1(); +f(); +e())
	ac(+9(); +b(); +d(); +c(); +0(); +6(); +a(); +7())
	ac(+c(); +1(); +9(); +b(); +f(); +1(); +7(); +4())
	ac(+e(); +4(); +9(); +b(); +6(); +9(); +c(); +1())
	ac(+e(); +f(); +b(); +e(); +4(); +7(); +8(); +6())
	ac(+0(); +f(); +c(); +1(); +9(); +d(); +c(); +6())
	ac(+2(); +4(); +0(); +c(); +a(); +1(); +c(); +c())
	ac(+2(); +d(); +e(); +9(); +2(); +c(); +6(); +f())
	ac(+4(); +a(); +7(); +4(); +8(); +4(); +a(); +a())
	ac(+5(); +c(); +b(); +0(); +a(); +9(); +d(); +c())
	ac(+7(); +6(); +f(); +9(); +8(); +8(); +d(); +a())
	ac(+9(); +8(); +3(); +e(); +5(); +1(); +5(); +2())
	ac(+a(); +8(); +3(); +1(); +c(); +6(); +6(); +d())
	ac(+b(); +0(); +0(); +3(); +2(); +7(); +c(); +8())
	ac(+b(); +f(); +5(); +9(); +7(); +f(); +c(); +7())
	ac(+c(); +6(); +e(); +0(); +0(); +b(); +f(); +3())
	ac(+d(); +5(); +a(); +7(); +9(); +1(); +4(); +7())
	ac(+0(); +6(); +c(); +a(); +6(); +3(); +5(); +1())
	ac(+1(); +4(); +2(); +9(); +2(); +9(); +6(); +7())
	ac(+2(); +7(); +b(); +7(); +0(); +a(); +8(); +5())
	ac(+2(); +e(); +1(); +b(); +2(); +1(); +3(); +8())
	ac(+4(); +d(); +2(); +c(); +6(); +d(); +f(); +c())
	ac(+5(); +3(); +3(); +8(); +0(); +d(); +1(); +3())
	ac(+6(); +5(); +0(); +a(); +7(); +3(); +5(); +4())
	ac(+7(); +6(); +6(); +a(); +0(); +a(); +b(); +b())
	ac(+8(); +1(); +c(); +2(); +c(); +9(); +2(); +e())
	ac(+9(); +2(); +7(); +2(); +2(); +c(); +8(); +5())
	ac(+a(); +2(); +b(); +f(); +e(); +8(); +a(); +1())
	ac(+a(); +8(); +1(); +a(); +6(); +6(); +4(); +b())
	ac(+c(); +2(); +4(); +b(); +8(); +b(); +7(); +0())
	ac(+c(); +7(); +6(); +c(); +5(); +1(); +a(); +3())
	ac(+d(); +1(); +9(); +2(); +e(); +8(); +1(); +9())
	ac(+d(); +6(); +9(); +9(); +0(); +6(); +2(); +4())
	ac(+f(); +4(); +0(); +e(); +3(); +5(); +8(); +5())
	ac(+1(); +0(); +6(); +a(); +a(); +0(); +7(); +0())
	ac(+1(); +9(); +a(); +4(); +c(); +1(); +1(); +6())
	ac(+1(); +e(); +3(); +7(); +6(); +c(); +0(); +8())
	ac(+2(); +7(); +4(); +8(); +7(); +7(); +4(); +c())
	ac(+3(); +4(); +b(); +0(); +b(); +c(); +b(); +5())
	ac(+3(); +9(); +1(); +c(); +0(); +c(); +b(); +3())
	ac(+4(); +e(); +d(); +8(); +a(); +a(); +4(); +a())
	ac(+5(); +b(); +9(); +c(); +c(); +a(); +4(); +f())
	ac(+6(); +8(); +2(); +e(); +6(); +f(); +f(); +3())
	ac(+7(); +4(); +8(); +f(); +8(); +2(); +e(); +e())
	ac(+7(); +8(); +a(); +5(); +6(); +3(); +6(); +f())
	ac(+8(); +4(); +c(); +8(); +7(); +8(); +1(); +4())
	ac(+8(); +c(); +c(); +7(); +0(); +2(); +0(); +8())
	ac(+9(); +0(); +b(); +e(); +f(); +f(); +f(); +a())
	ac(+a(); +4(); +5(); +0(); +6(); +c(); +e(); +b())
	ac(+b(); +e(); +f(); +9(); +a(); +3(); +f(); +7())
	ac(+c(); +6(); +7(); +1(); +7(); +8(); +f(); +2())
}
initRoundConstants(stack())

#Pre-processing:
#begin with the original message of length L bits
#append a single '1' bit
#append K '0' bits, where K is the minimum number >= 0 such that L + 1 + K + 64 is a multiple of 512
#append L as a 64-bit big-endian integer, making the total post-processed length a multiple of 512 bits
#For 256-bit input, this becomes 1 chunck of [data | 0x80 | 0x00 * 29 | 0x0100]

#copy chunk into first 16 words w[0..15] of the message schedule array
#stack: 3 bytes
readMessage(stack)
{
	index()   {stack       }
	value()   {index() >   }
	newStack(){value() >1()}

	w0(index();newStack())
	read32(value()) append(index();value())
	read32(value()) append(index();value())
	read32(value()) append(index();value())
	read32(value()) append(index();value())
	read32(value()) append(index();value())
	read32(value()) append(index();value())
	read32(value()) append(index();value())
	read32(value()) append(index();value())
	appendConst(index();+8(); +0(); +0(); +0(); +0(); +0(); +0(); +0();newStack())
	zero32(value())
	append(index();value())
	append(index();value())
	append(index();value())
	append(index();value())
	append(index();value())
	append(index();value())
	appendConst(index();+0(); +0(); +0(); +0(); +0(); +1(); +0(); +0();newStack())
}
readMessage(stack())

#Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array:
#stack: 28 bytes
extendMessageScheduleArray(stack)
{
	#8-bits:
	c3() {stack}
	c7() {stack >   }
	c18(){stack >>  }
	c17(){stack >>> }
	c19(){stack >>>>}
	c10(){stack >>>> >   }
	c64(){stack >>>> >>  }
	w()  {stack >>>> >>> }
	i_() {stack >>>> >>>>}
	wi() {stack >>>> >>>> >   }
	t1() {stack >>>> >>>> >>  }

	#32-bits:
	t2() {stack >>>> >>>> >>> }
	t3() {t2() >1()}

	#Rest (9 bytes):
	newStack(){t3() >1()}

	const8(c3() ;+0();+3();newStack())
	const8(c7() ;+0();+7();newStack())
	const8(c18();+1();+2();newStack())
	const8(c17();+1();+1();newStack())
	const8(c19();+1();+3();newStack())
	const8(c10();+0();+a();newStack())
	const8(c64();+4();+0();newStack())
	w0    (w()  ;          newStack())

	#for i from 16 to 63
	const8(i_();+3();+0();newStack()) #i_ = 64 - i
	while(i_();
		subtract8(wi();c64(); i_(); newStack())
		#write8(wi())
		ad8(wi(); w(); newStack())           #wi = w+i

		#s0 := (w[i-15] rightrotate 7) xor (w[i-15] rightrotate 18) xor (w[i-15] rightshift 3)
		copy8(wi(); t1(); newStack())
		! t1() --------------- ?~            #t1 = w+i-15
		arrayRetrieve32(t2();A();t1())       #t2 = w[i-15]
		rightshift32(s0();t2();c3();         #s0 = (w[i-15] rightshift 3)
			newStack())
		rightrotate32(t3();t2();c18();       #t3 = (w[i-15] rightrotate 18)
			newStack())
		xor32(s0();s0();t3();                # s0 ^= (w[i-15] rightrotate 18)
			newStack())
		rightrotate32(t3();t2();c7();        #t3 = (w[i-15] rightrotate 7)
			newStack())
		xor32(s0();s0();t3();                # s0 ^= (w[i-15] rightrotate 7)
			newStack())

		#s1 := (w[i-2] rightrotate 17) xor (w[i-2] rightrotate 19) xor (w[i-2] rightshift 10)
		copy8(wi(); t1(); newStack())
		! t1() -- ?~                         #t1 = w+i-2
		arrayRetrieve32(t2();A();t1())       #t2 = w[i-2]
		rightshift32(s1();t2();c10();        #s1 = (w[i-2] rightshift 10)
			newStack())
		rightrotate32(t3();t2();c19();       #t3 = (w[i-2] rightrotate 19)
			newStack())
		xor32(s1();s1();t3();                # s1 ^= (w[i-2] rightrotate 19)
			newStack())
		rightrotate32(t3();t2();c17();       #t3 = (w[i-2] rightrotate 17)
			newStack())
		xor32(s1();s1();t3();                # s1 ^= (w[i-2] rightrotate 17)
			newStack())

		#w[i] := w[i-16] + s0 + w[i-7] + s1
		ad32(s0();s1();                      # s0 += s1
			newStack())
		copy8(wi(); t1(); newStack())
		! t1() ---------------- ?~           #t1 = w+i-16
		arrayRetrieve32(t2();A();t1())       #t2 = w[i-16]
		ad32(s0();t2();                      # s0 += w[i-16]
			newStack())
		copy8(wi(); t1(); newStack())
		! t1() ------- ?~                    #t1 = w+i-7
		arrayRetrieve32(t2();A();t1())       #t2 = w[i-7]
		ad32(s0();t2();                      # s0 += w[i-7]
			newStack())
		arrayStore32(A();wi();s0())          #w[i] = s0

		!? i_() - ?~
		)
}
extendMessageScheduleArray(stack())

#Initialize working variables to current hash value:
#stack: 1 byte
copy32(h0(); a(); stack())
copy32(h1(); b(); stack())
copy32(h2(); c(); stack())
copy32(h3(); d(); stack())
copy32(h4(); e(); stack())
copy32(h5(); f(); stack())
copy32(h6(); g(); stack())
copy32(h7(); h(); stack())


#    Compression function main loop:
#stack: 25 bytes
mainLoop(stack)
{
	#8-bits:
	k()  {stack}
	w()  {stack >   }
	c64(){stack >>  }
	c6() {stack >>> }
	c11(){stack >>>>}
	c25(){stack >>>> >   }
	c2() {stack >>>> >>  }
	c13(){stack >>>> >>> }
	c22(){stack >>>> >>>>}
	i_() {stack >>>> >>>> >   }
	i()  {stack >>>> >>>> >>  }
	t1() {stack >>>> >>>> >>> }

	#32-bits:
	t2() {stack >>>> >>>> >>>>}

	#Rest (9 bytes):
	newStack(){t2() >1()}

	k0    (k()  ;          newStack())
	const8(c64();+4();+0();newStack())
	const8(c6() ;+0();+6();newStack())
	const8(c11();+0();+b();newStack())
	const8(c25();+1();+9();newStack())
	const8(c2() ;+0();+2();newStack())
	const8(c13();+0();+d();newStack())
	const8(c22();+1();+6();newStack())
	w0    (w()  ;          newStack())

	#    for i from 0 to 63
	const8(i_();+4();+0();newStack()) #i_ = 64 - i
	while(i_();
		subtract8(i();c64(); i_(); newStack())

		#s1 := (e rightrotate 6) xor (e rightrotate 11) xor (e rightrotate 25)
		rightrotate32(s1();e();c6();        #s1 = (e rightrotate 6)
			newStack())

		rightrotate32(t2();e();c11();       #t2 = (e rightrotate 11)
			newStack())
		xor32(s1();s1();t2();               # s1 ^= (e rightrotate 11)
			newStack())

		rightrotate32(t2();e();c25();       #t2 = (e rightrotate 25)
			newStack())
		xor32(s1();s1();t2();               # s1 ^= (e rightrotate 25)
			newStack())

		#ch := (e and f) xor ((not e) and g)
		not32(t2();e();newStack())          #t2 = not e
		and32(ch();t2();g();                #ch = ((not e) and g)
			newStack())
		and32(t2();e();f();                 #t2 = (e and f)
			newStack())
		xor32(ch();ch();t2();               #ch ^= (e and f)
			newStack())

		#temp1 := h + S1 + ch + k[i] + w[i]
		copy32(h();temp1();newStack())
		ad32(temp1();s1();
			newStack())
		ad32(temp1();ch();
			newStack())

		add8(t1();k();i();newStack())       #t1 = k+i
		arrayRetrieve32(t2();A();t1())      #t2 = k[i]
		ad32(temp1();t2();
			newStack())

		add8(t1();w();i();newStack())       #t1 = w+i
		arrayRetrieve32(t2();A();t1())      #t2 = w[i]
		ad32(temp1();t2();
			newStack())

		#S0 := (a rightrotate 2) xor (a rightrotate 13) xor (a rightrotate 22)
		rightrotate32(s0();a();c2();        #s0 = (a rightrotate 2)
			newStack())
		rightrotate32(t2();a();c13();       #t2 = (a rightrotate 13)
			newStack())
		xor32(s0();s0();t2();               #s0 ^= (a rightrotate 13)
			newStack())
		rightrotate32(t2();a();c22();       #t2 = (a rightrotate 22)
			newStack())
		xor32(s0();s0();t2();               #s0 ^= (a rightrotate 22)
			newStack())

		#maj := (a and b) xor (a and c) xor (b and c)
		and32(maj();a();b();                #maj = (a and b)
			newStack())
		and32(t2();a();c();                 #t2 = (a and c)
			newStack())
		xor32(maj();maj();t2();             #maj ^= (a and c)
			newStack())
		and32(t2();b();c();                 #t2 = (b and c)
			newStack())
		xor32(maj();maj();t2();             #maj ^= (b and c)
			newStack())

		#temp2 := S0 + maj
		copy32(s0();temp2();newStack())
		ad32(temp2();maj();
			newStack())

		#h := g
		move32(g();h())
		#g := f
		move32(f();g())
		#f := e
		move32(e();f())
		#e := d + temp1
		move32(d();e())
		ad32(e();temp1();
			newStack())
		#d := c
		move32(c();d())
		#c := b
		move32(b();c())
		#b := a
		move32(a();b())
		#a := temp1 + temp2
		copy32(temp1();a();newStack())
		ad32(a();temp2();
			newStack())

		!? i_() - ?~
		)
}
mainLoop(stack())

#Add the compressed chunk to the current hash value:
#stack: 5 bytes
#h0 := h0 + a
ad32(h0();a();
	stack())
#h1 := h1 + b
ad32(h1();b();
	stack())
#h2 := h2 + c
ad32(h2();c();
	stack())
#h3 := h3 + d
ad32(h3();d();
	stack())
#h4 := h4 + e
ad32(h4();e();
	stack())
#h5 := h5 + f
ad32(h5();f();
	stack())
#h6 := h6 + g
ad32(h6();g();
	stack())
#h7 := h7 + h
ad32(h7();h();
	stack())

#Produce the final hash value (big-endian):
#hash := h0 append h1 append h2 append h3 append h4 append h5 append h6 append h7
write32(h0())
write32(h1())
write32(h2())
write32(h3())
write32(h4())
write32(h5())
write32(h6())
write32(h7())

